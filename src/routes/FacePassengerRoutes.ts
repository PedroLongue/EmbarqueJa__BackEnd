const router = require("express").Router();

import { authGuard } from "../middlewares/authGuard";
import { upload } from "../middlewares/upload";
import {
  uploadPassengerFace,
  adminValidateFace,
} from "../controllers/facePassengerController";
import { requireAdmin } from "../middlewares/requireAdmin";

router.post("/upload", authGuard, upload.single("image"), uploadPassengerFace);
router.post("/admin-validate", authGuard, requireAdmin, adminValidateFace);

module.exports = router;

/**
 * @swagger
 * /api/face-passengers/upload:
 *   post:
 *     summary: Upload facial data for passenger identification
 *     tags: [ValidatePassengers]
 *     security:
 *       - bearerAuth: []
 *     description: >
 *       Uploads a facial image to be associated with a passenger during the ticket reservation process.
 *       The image must be sent as `multipart/form-data` under the `image` field.
 *       The system will automatically extract a 128-length face descriptor using face-api.js.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - descriptor
 *             properties:
 *               descriptor:
 *                 type: array
 *                 description: 128-length array generated by face-api.js (Float32Array)
 *                 items:
 *                   type: number
 *     responses:
 *       200:
 *         description: Face descriptor successfully stored
 *       400:
 *         description: Invalid image or processing error
 *       401:
 *         description: Unauthorized (missing or invalid token)
 */

/**
 * @swagger
 * /api/face-passengers/admin-validate:
 *   post:
 *     summary: Admin-only passenger face recognition during boarding
 *     tags: [ValidatePassengers]
 *     security:
 *       - bearerAuth: []
 *     description: >
 *       Validates a passenger's identity using face recognition during the boarding process.  
 *       This endpoint is **restricted to administrators** (via the `requireAdmin` middleware).  
 *       It compares the provided descriptor against stored passenger descriptors.  
 *       If a match is found within the defined threshold (default 0.6), passenger data is returned.

 *       **Example descriptor:**
 *       ```json
 *       [
 *         -0.0844, 0.0486, 0.0622, -0.0799, 0.0597, -0.0143, -0.0194, -0.0592,
 *         0.2085, -0.1029, 0.2323, -0.0090, -0.1590, -0.1066, 0.0228, 0.0893,
 *         ... (112 more values)
 *       ]
 *       ```
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - descriptor
 *             properties:
 *               descriptor:
 *                 type: array
 *                 description: 128-length array generated by face-api.js (Float32Array)
 *                 items:
 *                   type: number
 *     responses:
 *       200:
 *         description: Passenger successfully recognized and data returned
 *       400:
 *         description: Missing or invalid descriptor
 *       401:
 *         description: Unauthorized (token missing, invalid, or not an admin)
 *       404:
 *         description: No matching passenger found
 */
